// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// NOTE: https://prisma-editor.vercel.app

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String               @id @default(cuid())
    name                String?
    email               String?              @unique
    emailVerified       DateTime?
    phoneNumber         String?
    phoneNumberVerified DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    posts               Post[]
    Log                 Log[]
    Participant         Participant[]
    OrganizationMember  OrganizationMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id              String         @id @default(cuid())
    status          EventStatus    @default(DRAFT)
    title           String
    subtitle        String?
    image           String?
    totalTickets    Int?
    startDateTime   DateTime
    endDateTime     DateTime
    description     String?
    Location        Location?      @relation(fields: [locationId], references: [id])
    locationId      String?
    Log             Log[]
    Organization    Organization?  @relation(fields: [organizationId], references: [id])
    organizationId  String?
    Drop            Drop[]
    EventSettings   EventSettings? @relation(fields: [eventSettingsId], references: [id])
    eventSettingsId String?
}

enum EventStatus {
    DRAFT
    PUBLISHED
    HIDDEN
}

model Location {
    id        String  @id @default(cuid())
    name      String
    city      String
    street    String?
    zip       String?
    latitude  Float?
    longitude Float?
    Events    Event[]
    Log       Log[]
}

model Log {
    id                 String            @id @default(cuid())
    createdAt          DateTime          @default(now())
    action             String
    data               String?
    user               User?             @relation(fields: [userId], references: [id])
    userId             String?
    Event              Event?            @relation(fields: [eventId], references: [id])
    eventId            String?
    Ticket             Ticket?           @relation(fields: [ticketId], references: [id])
    ticketId           String?
    Participant        Participant?      @relation(fields: [participantId], references: [id])
    participantId      String?
    Pool               Pool?             @relation(fields: [poolId], references: [id])
    poolId             String?
    TicketType         TicketType?       @relation(fields: [ticketTypeId], references: [id])
    ticketTypeId       String?
    Organization       Organization?     @relation(fields: [organizationId], references: [id])
    organizationId     String?
    OrganizationRole   OrganizationRole? @relation(fields: [organizationRoleId], references: [id])
    organizationRoleId String?
    Privilege          Privilege?        @relation(fields: [privilegeId], references: [id])
    privilegeId        String?
    Location           Location?         @relation(fields: [locationId], references: [id])
    locationId         String?
    Drop               Drop?             @relation(fields: [dropId], references: [id])
    dropId             String?
    EventSettings      EventSettings?    @relation(fields: [eventSettingsId], references: [id])
    eventSettingsId    String?

    @@index([ticketId])
    @@index([userId])
}

model Ticket {
    id            String       @id @default(cuid())
    code          String       @unique
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    participant   Participant? @relation(fields: [participantId], references: [id])
    participantId String?
    Pool          Pool?        @relation(fields: [poolId], references: [id])
    poolId        String?
    Log           Log[]
}

model Participant {
    id        String   @id @default(cuid())
    firstName String
    lastName  String
    birthDate DateTime
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    Ticket    Ticket[]
    Log       Log[]
}

model TicketType {
    id          String  @id @default(cuid())
    name        String
    description String?
    color       String?
    image       String?
    Pools       Pool[]
    Log         Log[]
}

model Pool {
    id           String      @id @default(cuid())
    price        Int
    time         DateTime?
    name         String?
    totalTickets Int?
    TicketType   TicketType? @relation(fields: [ticketTypeId], references: [id])
    ticketTypeId String?
    Drop         Drop?       @relation(fields: [dropId], references: [id])
    dropId       String?
    Log          Log[]
    Ticket       Ticket[]
    Discount     Discount[]
}

model Organization {
    id                 String               @id @default(cuid())
    name               String
    Events             Event[]
    OrganizationMember OrganizationMember[]
    Log                Log[]
}

model OrganizationMember {
    id               String             @id @default(cuid())
    userId           String
    User             User               @relation(fields: [userId], references: [id])
    Organization     Organization?      @relation(fields: [organizationId], references: [id])
    organizationId   String?
    OrganizationRole OrganizationRole[]
}

model OrganizationRole {
    id                 String               @id @default(cuid())
    OrganizationMember OrganizationMember[]
    name               String
    color              String?
    privileges         Privilege[]
    Log                Log[]
}

model Privilege {
    id               String             @id @default(cuid())
    OrganizationRole OrganizationRole[]
    name             String
    description      String?
    Log              Log[]
}

model Drop {
    id            String     @id @default(cuid())
    name          String?
    startDateTime DateTime
    endDateTime   DateTime?
    Log           Log[]
    Pool          Pool[]
    Event         Event?     @relation(fields: [eventId], references: [id])
    eventId       String?
    status        DropStatus? @default(DRAFT) // prisma/extenders.ts
}

enum DropStatus {
    DRAFT
    ARCHIVED
    PUBLISHED
    UPCOMING
    ACTIVE
    ENDED
}

model EventSettings {
    id                            String   @id @default(cuid())
    Event                         Event[]
    name                          String
    availabilityIndicatorOverride Int?
    buttonText                    String?
    remainingTicketsText          String?
    dropSoldOutText               String?
    eventSoldOutText              String?
    showAvailabilityIndicator     Boolean?
    showRemainingTickets          Boolean?
    showTotalTickets              Boolean?
    facebookLink                  String?
    instagramLink                 String?
    spotifyLink                   String?
    showSpotifyPlaylist           Boolean?
    verticalOverride              Boolean?
    Log                           Log[]
}

model Discount {
    code           String       @id @default(cuid())
    type           DiscountType
    amount         Int
    Pools          Pool[]
    availableTotal Int?
    color          String?
    isActive       Boolean      @default(true)
}

enum DiscountType {
    PERCENTAGE
    AMOUNT
}
