// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Log           Log[]
    Event         Event[]
    Participant   Participant[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id            String    @id @default(cuid())
    title         String
    subtitle      String?
    image         String?
    startDateTime DateTime
    endDateTime   DateTime
    description   String?
    Location      Location? @relation(fields: [locationId], references: [id])
    locationId    String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    Log           Log[]
    createdBy     User?     @relation(fields: [createdById], references: [id])
    createdById   String?
}

model Location {
    id        String   @id @default(cuid())
    name      String
    city      String
    street    String?
    zip       String?
    latitude  Float?
    longitude Float?
    Events    Event[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Log {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    event     Event?   @relation(fields: [eventId], references: [id])
    eventId   String?
    action    String
    data      String?
}

model Ticket {
    id            String       @id @default(cuid())
    code          String       @unique
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    participant   Participant? @relation(fields: [participantId], references: [id])
    participantId String?
}

model Participant {
    id        String   @id @default(cuid())
    firstName String
    lastName  String
    birthDate DateTime
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Ticket    Ticket[]
}
